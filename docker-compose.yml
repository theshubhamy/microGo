services:
  # Account service
  account:
    build:
      context: .
      dockerfile: ./services/account/app.dockerfile
    depends_on:
      - account_db
      - redis
    environment:
      DATABASE_URL: postgres://microDbAdmin:microDbPSWD@account_db/microDb?sslmode=disable
      JWT_SECRET: super-secret-access
      REFRESH_JWT_SECRET: super-secret-refresh
      REDIS_URL: redis://default:redispassword@redis:6379/0
    restart: on-failure

  # Catalog service
  catalog:
    build:
      context: .
      dockerfile: ./services/catalog/app.dockerfile
    depends_on:
      - catalog_db
    environment:
      DATABASE_URL: http://catalog_db:9200
    restart: on-failure

  # Order service
  order:
    build:
      context: .
      dockerfile: ./services/order/app.dockerfile
    depends_on:
      - order_db
    environment:
      DATABASE_URL: postgres://microDbAdmin:microDbPSWD@order_db/microDb?sslmode=disable
      ACCOUNT_SERVICE_URL: account:8080
      CATALOG_SERVICE_URL: catalog:8080
    restart: on-failure

  # GraphQL Gateway
  graphql:
    build:
      context: .
      dockerfile: ./graphql/app.dockerfile
    ports:
      - '8000:8080'
    depends_on:
      - account
      - catalog
      - order
    environment:
      ACCOUNT_SERVICE_URL: account:8080
      CATALOG_SERVICE_URL: catalog:8080
      ORDER_SERVICE_URL: order:8080
      REDIS_URL: redis://default:redispassword@redis:6379/0
    restart: on-failure

  # Account DB (PostgreSQL)
  account_db:
    build:
      context: ./services/account
      dockerfile: db.dockerfile
    environment:
      POSTGRES_DB: microDb
      POSTGRES_USER: microDbAdmin
      POSTGRES_PASSWORD: microDbPSWD
    restart: unless-stopped

  # Catalog DB (Elasticsearch)
  catalog_db:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
    environment:
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      discovery.type: single-node
      xpack.security.enabled: 'false' # disable security for local dev
    ports:
      - '9200:9200'
    restart: unless-stopped

    # âš¡ Redis Cache
  redis:
    image: redis:7
    command: redis-server --requirepass redispassword
    ports:
      - '6379:6379'
    restart: unless-stopped

  # Order DB (PostgreSQL)
  order_db:
    build:
      context: ./services/order
      dockerfile: db.dockerfile
    environment:
      POSTGRES_DB: microDb
      POSTGRES_USER: microDbAdmin
      POSTGRES_PASSWORD: microDbPSWD
    restart: unless-stopped

networks:
  default:
    name: microgo-net
